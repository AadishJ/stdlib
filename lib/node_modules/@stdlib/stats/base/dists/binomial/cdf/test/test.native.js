/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var tryRequire = require( '@stdlib/utils/try-require' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var EPS = require( '@stdlib/constants/float64/eps' );
var max = require( '@stdlib/math/base/special/max' );


// FIXTURES //

var highHighRange = require( './fixtures/julia/high_high.json' );
var highSmallRange = require( './fixtures/julia/high_small.json' );
var smallHighRange = require( './fixtures/julia/small_high.json' );
var smallSmallRange = require( './fixtures/julia/small_small.json' );


// VARIABLES //

var cdf = tryRequire(resolve(__dirname, './../lib/native.js'));
var opts = {
	'skip': (cdf instanceof Error)
};


// TESTS //

tape('main export is a function', opts, function test(t) {
	t.ok(true, __filename);
	t.strictEqual(typeof cdf, 'function', 'main export is a function');
	t.end();
});

tape('if provided `NaN` for p parameter, the function returns `NaN`', opts, function test(t) {
	var y = cdf(5, 10, NaN);
	t.equal(isnan(y), true, 'returns NaN');
	t.end();
});

tape('if provided a probability `p` outside [0,1], the function returns `NaN`', opts, function test(t) {
	var y = cdf(5, 10, 1.5);
	t.equal(isnan(y), true, 'returns NaN');
	y = cdf(5, 10, -0.5);
	t.equal(isnan(y), true, 'returns NaN');
	t.end();
});

tape('the function evaluates the cdf for `k` given a small range `n` and `p`', opts, function test(t) {
	var expected;
	var delta;
	var tol;
	var k;
	var n;
	var p;
	var y;
	var i;

	expected = smallSmallRange.expected;
	k = smallSmallRange.x;
	n = smallSmallRange.n;
	p = smallSmallRange.p;
	for (i = 0; i < k.length; i++) {
		y = cdf(k[i], n[i], p[i]);
		if (y === expected[i]) {
			t.equal(y, expected[i], 'k: ' + k[i] + ', n: ' + n[i] + ', p: ' + p[i] + ', y: ' + y + ', expected: ' + expected[i]);
		} else {
			delta = abs(y - expected[i]);

			// Conditional tolerance adjustment:
			if (expected[i] < 1e-10) {
				tol = 1e-5; // Increased tolerance for very small values
			} else {
				tol = max(2.0 * EPS * abs(expected[i]), 1e-12); // Relative tolerance with a floor
			}

			t.ok(delta <= tol, 'within tolerance. k: ' + k[i] + '. n: ' + n[i] + '. p: ' + p[i] + '. y: ' + y + '. E: ' + expected[i] + '. Δ: ' + delta + '. tol: ' + tol + '.');
		}
	}
	t.end();
});

tape('the function evaluates the cdf for `k` given a medium range `n` and `p`', opts, function test(t) {
	var expected;
	var delta;
	var tol;
	var k;
	var n;
	var p;
	var y;
	var i;
	expected = smallHighRange.expected;
	k = smallHighRange.x;
	n = smallHighRange.n;
	p = smallHighRange.p;
	for (i = 0; i < k.length; i++) {
		y = cdf(k[i], n[i], p[i]);
		if (y === expected[i]) {
			t.equal(y, expected[i], 'k: ' + k[i] + ', n: ' + n[i] + ', p: ' + p[i] + ', y: ' + y + ', expected: ' + expected[i]);
		} else {
			delta = abs(y - expected[i]);

			// Conditional tolerance adjustment:
			if (expected[i] < 1e-10) {
				tol = 1e-5; // Increased tolerance for very small values
			} else {
				tol = max(2.0 * EPS * abs(expected[i]), 1e-12); // Relative tolerance with a floor
			}

			t.ok(delta <= tol, 'within tolerance. k: ' + k[i] + '. n: ' + n[i] + '. p: ' + p[i] + '. y: ' + y + '. E: ' + expected[i] + '. Δ: ' + delta + '. tol: ' + tol + '.');
		}
	}
	t.end();
});

tape('the function evaluates the cdf for `k` given a large range `n` and `p`', opts, function test(t) {
	var expected;
	var delta;
	var tol;
	var k;
	var n;
	var p;
	var y;
	var i;

	expected = highSmallRange.expected;
	n = highSmallRange.n;
	k = highSmallRange.x;
	p = highSmallRange.p;
	for (i = 0; i < k.length; i++) {
		y = cdf(k[i], n[i], p[i]);
		if (y === expected[i]) {
			t.equal(y, expected[i], 'k: ' + k[i] + ', n: ' + n[i] + ', p: ' + p[i] + ', y: ' + y + ', expected: ' + expected[i]);
		} else {
			delta = abs(y - expected[i]);

			// Conditional tolerance adjustment:
			if (expected[i] < 1e-10) {
				tol = 1e-5; // Increased tolerance for very small values
			} else {
				tol = max(2.0 * EPS * abs(expected[i]), 1e-12); // Relative tolerance with a floor
			}

			t.ok(delta <= tol, 'within tolerance. k: ' + k[i] + '. n: ' + n[i] + '. p: ' + p[i] + '. y: ' + y + '. E: ' + expected[i] + '. Δ: ' + delta + '. tol: ' + tol + '.');
		}
	}
	t.end();
});

tape('the function evaluates the cdf for `k` given a large range `n` and `p`', opts, function test(t) {
	var expected;
	var delta;
	var tol;
	var k;
	var n;
	var p;
	var y;
	var i;

	expected = highHighRange.expected;
	k = highHighRange.x;
	n = highHighRange.n;
	p = highHighRange.p;
	for (i = 0; i < k.length; i++) {
		y = cdf(k[i], n[i], p[i]);
		if (y === expected[i]) {
			t.equal(y, expected[i], 'k: ' + k[i] + ', n: ' + n[i] + ', p: ' + p[i] + ', y: ' + y + ', expected: ' + expected[i]);
		} else {
			delta = abs(y - expected[i]);

			// Conditional tolerance adjustment:
			if (expected[i] < 1e-10) {
				tol = 1e-5; // Increased tolerance for very small values
			} else {
				tol = max(2.0 * EPS * abs(expected[i]), 1e-12); // Relative tolerance with a floor
			}

			t.ok(delta <= tol, 'within tolerance. k: ' + k[i] + '. n: ' + n[i] + '. p: ' + p[i] + '. y: ' + y + '. E: ' + expected[i] + '. Δ: ' + delta + '. tol: ' + tol + '.');
		}
	}
	t.end();
});
