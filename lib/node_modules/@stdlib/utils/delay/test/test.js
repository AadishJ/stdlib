/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var delay = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof delay, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 2', function test( t ) {
	t.equal( delay.length, 2, 'arity is 2' );
	t.end();
});

tape( 'the function throws an error if not provided a function to invoke', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		undefined,
		true,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			delay( value, 3000 );
		};
	}
});

tape( 'the function throws an error if not provided a duration', function test( t ) {
	t.throws( foo, TypeError, 'throws an error' );
	t.end();

	function foo() {
		delay( clbk );
	}
});

tape( 'the function throws an error if not provided a valid duration', function test( t ) {
	var values;
	var i;

	values = [
		'beep',
		'beepboop',
		NaN,
		null,
		undefined,
		true,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			delay( clbk, value );
		};
	}
});

tape( 'the function returns an object having a `clear` method to clear a pending timeout', function test( t ) {
	var timeout;
	var i;

	timeout = delay( clbk, 100 );
	t.equal( typeof timeout.clear, 'function', 'has `clear` method' );

	timeout.clear();
	t.equal( timeout.status, 2, 'returns `2`' );

	timeout = delay( clbk, 100 );
	t.equal( timeout.status, 0, 'returns `0`' );

	timeout.invoke();
	t.equal( timeout.status, 1, 'returns `1`' );
	timeout.invoke();
	t.equal( timeout.status, 1, 'returns `1`' );

	t.end();

	function clbk() {
		t.ok( true, 'invoked' );
	}
});

tape( 'the function returns an object having an `invoke` method to clear a pending timeout and invoke a callback', function test( t ) {
	var timeout;
	var i;

	timeout = delay( clbk, 100 );
	t.equal( typeof timeout.invoke, 'function', 'has `invoke` method' );

	timeout.invoke();
	t.equal( timeout.status, 1, 'returns `1`' );
	timeout.invoke();
	t.equal( timeout.status, 1, 'returns `1`' );

	t.end();

	function clbk() {
		t.ok( true, 'invoked' );
	}
});

tape( 'the function returns an object having a `duration` property providing the duration (in milliseconds) after which to invoke a delayed function', function test( t ) {
	var timeout;
	var i;

	timeout = delay(
