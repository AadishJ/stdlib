/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MODULES //

var sliceShape = require( '@stdlib/slice/base/shape' );
var take = require( '@stdlib/array/base/take' );
var vind2bind = require( '@stdlib/ndarray/base/vind2bind' );
var numel = require( '@stdlib/ndarray/base/numel' );
var nonreducedDimensions = require( './nonreduced_dimensions.js' );
var sliceStart = require( './slice_start.js' );
var sliceStrides = require( './slice_strides.js' );
var options = require( './array_options.js' );
var empty = require( './empty.js' );


// MAIN //

/**
* Returns a view of a one-dimensional array.
*
* @private
* @param {Function} ctor - array constructor
* @param {string} dtype - array data type
* @param {Collection} data - underlying data buffer
* @param {NonNegativeIntegerArray} shape - array shape
* @param {IntegerArray} strides - array strides
* @param {NonNegativeInteger} offset - index offset
* @param {string} order - layout order
* @param {Slice} slice - slice object (un-normalized)
* @param {Slice} nslice - normalized slice object
* @returns {ndarray} ndarray view
*/
function sliceView( ctor, dtype, data, shape, strides, offset, order, slice, nslice ) {
	var sdims;
	var sh;

	// Compute the slice shape:
	sh = sliceShape( nslice );

	// Resolve the indices of the non-reduced dimensions:
	sdims = nonreducedDimensions( slice ); // TODO: consider removing?

	// If the slice does not contain any elements, return an empty array...
	if ( numel( sh ) === 0 ) {
		return empty( ctor, dtype, take( sh, sdims ), order );
	}
	// Resolve the index offset of the first element:
	offset = vind2bind( shape, strides, offset, order, sliceStart( nslice, shape, strides, 0 ), 'throw' );

	// Remove reduced dimensions from the slice shape:
	sh = take( sh, sdims );

	// If all dimensions were reduced, return a zero-dimensional array...
	if ( sh.length === 0 ) {
		return new ctor( dtype, data, [], [ 0 ], offset, order, options() );
	}
	// Update strides according to slice steps:
	strides = sliceStrides( nslice, strides, sdims );

	// Return a slice view:
	return new ctor( dtype, data, sh, strides, offset, order, options() );
}


// EXPORTS //

module.exports = sliceView;
